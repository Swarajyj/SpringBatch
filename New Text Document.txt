1)What is job and step?
-each job can have multiple steps


Step types
----------
1)Tasklet step (simple task)
2)Chunk-Oriented step (reading 1000 lines for eg from csv)
Chunk step =
    Item Reader +
    Item Processor + (not always necessary )
    Item Writer 



Different types of item readers present in spring batch (in-build)

Spring batch architecture:
--------------------------


How to create job and step?
-Job Builder Factory and Step Builder Factory.

Structure(Take diagram from udemy lecture 14)
-------------------------------------------
Job
Job Instances (01 March, 02 March) - one per day
Job Execution (Store job information like when start end, end time and status) - can happen many times if run was failure.)
Execution Context
-----------------
1)Job Execution Context - to pass data within a job.(to pass data withing steps)
2)Data stored at the end of job.
3)Key value pair


Step
Step Execution (Store step information like when start end, end time and status) - can happen many times if run was failure.)

Execution Context
-----------------
1)Step Execution Context - to pass data within a step.
2)Key value pair.



spring.batch.jdbc.initialize-schema=always
---------------------------------------------
will look for the table if present, if its present it wont create new tables.

Tables created:
---------------
BATCH_JOB_INSTANCE - Stores thejob key of instance with job name.
BATCH_JOB_EXECUTION - Stores the status of job Start_time ,end_time, Status with job instance id.
BATCH_JOB_EXECUTION_CONTEXT - stores map with job_excution_id.
BATCH_JOB_EXECUTION_PARAMS - 
BATCH_STEP_EXECUTION - Stores step name with job_execution_id , start time , end time and status.
BATCH_STEP_EXECUTION_CONTEXT - Stores map with step_execution_id from BATCH_STEP_EXECUTION.

Note:
-----
If one job execution status is complete under a job instance, it will not run when you try second time(no second job execution).
-To avoid this we can use job parameter, to give unique job instance id.
-use RunIdIncrementer() for getting new job parameter everytime.

Question , What is use of RunIdIncrementer()?
Job Listener:
-------------
-intercept and excute the job.

To disable job start during launch
----------------------------------
spring.batch.job.enabled=false


To enable rest api in spring boot
---------------------------------
<artifactId>spring-boot-starter-web</artifactId>

What is used of @Qualifier tag?
-To resolve ambiguity

@EnableAsync in application.java to enable async behavior in spring boot.
Mark method as @Async

@Autowired
JobLauncher

@Scheduled(cron="0 0/1 * 1/1 * ?")- this is put above a method, where it starts job using jobLauncher. This is table from spring scheduler.


While invoking job using rest api, we use
JobService.startJob();
JobOperator.stop();

use of @value ???


Item Readers:
-------------
If we use built in item reader , no need to do things like
1)returning null.
2)using index i variable.

1)Flat File Item Reader
--------------------
FlatFileItemReader.class
-Source of location
-Line mapper reads line
  * Line Tokenizer - (give delimited , column headers)
  * Bean Mapper - Requires POJO to read from csv.
  
JSON Item Reader
XML Item reader
JDBC - JdbcUCursorItemReader
REST API Item Reader.



  
-@ConfigurationProperties(prefix = "spring.datasource")
 * can be used for multiple db.
 
@Primary can be used to select db for storing metadata. 

Fault Tolerence:
----------------
Skip policy
Retry Mechanism

Skip fault record:
------------------
.reader().processor().writer().faultTolerant().skip(FlatFileParseException.class).skip(NullPointerException.class).skip(Throwable.class).skipLimit(2) or skipLimit(Interger.MAX_VALUE) or skipPolicy(new AlwaysSkipItemSkipPolicy())



Capturing bad records in reader
------------------------------

@Component
class CustomSkipListener

@SkipInRead
void skipInRead(Throwable th){
	if(th instance of FlatFileParseException){
		
	}

}
-use listener
.reader().processor().writer().faultTolerant().skip(FlatFileParseException.class).listener(skipListener)


Capturing bad records in processor
----------------------------------
@OnSkipInProcess


Capturing bad records in writer
@OnSkipInWrite


Using SkipListenerInterface
---------------------------
methods:
onSkipInRead ,..Write,...Process


Retry Mechanism
----------------
-This is only applicable processor and writer.
.reader().processor().writer().faultTolerant().skip(FlatFileParseException.class).listener(skipListener).retryLimit(1).retry(Throwable.class).build()

retryLimit(1).retry(Throwable.class)
-------------------------------------
-Retry once if any exception occurs.
Note: While using rety dont use always skip policy or set skip limit to Interger.MAX_VALUE.It will end in infinte loop.
* Weired if retry = 3.
For writer it will be 3 and process = n-1 , ie 2
